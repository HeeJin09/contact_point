#!/usr/bin/env python3
from math import sin, cos, tan, pi
import sys, os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
import pybullet as p
import pybullet_data

from math import *
from modern_robotics import *
import serial
from scipy.spatial.transform import Rotation
import time
import os
import sys
import can
import numpy as np


_F = {'force':[0.0]*3,'torque':[0.0]*3}

init_time=time.time()
DF=50; DT=2000
RFT_frq=30
channel = 0

frq_cutoff = 80
alpha = (frq_cutoff*(1/RFT_frq))/(1+frq_cutoff*(1/RFT_frq))
F_ext_buf = np.array([0.0]*6)
F_ext_off = np.array([0.0]*6) 

bus = can.interface.Bus(bustype = 'kvaser', channel = 0, bitrate = 1000000)


tx_message = can.Message(arbitration_id = 0x64, is_extended_id = False, data = [0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01])
bus.send(tx_message, timeout = 0.5)

rx_message_1 = bus.recv()
rx_message_2 = bus.recv()

fx = ((rx_message_1.data[1]<<8) + rx_message_1.data[2])
fy = ((rx_message_1.data[3]<<8) + rx_message_1.data[4])
fz = ((rx_message_1.data[5]<<8) + rx_message_1.data[6])
signed_fx = (-(fx & 0x8000) | (fx&0x7fff))/DF
signed_fy = (-(fy & 0x8000) | (fy&0x7fff))/DF
signed_fz = (-(fz & 0x8000) | (fz&0x7fff))/DF

tx = ((rx_message_1.data[7]<<8) + rx_message_2.data[0])
ty = ((rx_message_2.data[1]<<8) + rx_message_2.data[2])
tz = ((rx_message_2.data[3]<<8) + rx_message_2.data[4])
signed_tx = (-(tx & 0x8000) | (tx&0x7fff))/DT
signed_ty = (-(ty & 0x8000) | (ty&0x7fff))/DT
signed_tz = (-(tz & 0x8000) | (tz&0x7fff))/DT


F_ext_buf = np.array([signed_tx, signed_ty, signed_tz] + [signed_fx, signed_fy, signed_fz])

# Set filter
# tx_message = can.Message(arbitration_id = 0x64, is_extended_id = False, data = [0x08, 0x01, 0x09, 0x01, 0x01, 0x01, 0x01, 0x01])
# bus.send(tx_message, timeout = 0.5)
# bus.recv()

# tx_message = can.Message(arbitration_id = 0x64, is_extended_id = False, data = [0x11, 0x01, 0x09, 0x01, 0x01, 0x01, 0x01, 0x01])
# bus.send(tx_message, timeout = 0.5)
# bus.recv()

pi = np.pi
ser = serial.Serial('COM16', 115200)
CONTROL_FREQ = 30.0
dt = 1.0/CONTROL_FREQ
endTime = 50

eul_x = 0.0
eul_y = 0.0
eul_z = 0.0

p.connect(p.GUI)
p.configureDebugVisualizer(p.COV_ENABLE_GUI,0)
p.configureDebugVisualizer(p.COV_ENABLE_TINY_RENDERER,1)
p.configureDebugVisualizer(p.COV_ENABLE_SHADOWS,0)

p.resetDebugVisualizerCamera(cameraDistance=0.15, cameraYaw=0.0, cameraPitch=-30, cameraTargetPosition=[0.0,0,0.05])
p.setTimeStep(dt)
p.setPhysicsEngineParameter(dt)
p.setGravity(0, 0, -9.8)

quat = p.getQuaternionFromEuler([eul_x,eul_y,eul_z])

R = p.getMatrixFromQuaternion(quat)
R = np.reshape(R,[3,3])
n1 = R@np.array([0,0,1]).T
n2 = R@np.array([0,-1,0]).T
n3 = R@np.array([0,1,0]).T
n4 = R@np.array([-1,0,0]).T
n5 = R@np.array([1,0,0]).T

nx = R@np.array([1,0,0]).T
ny = R@np.array([0,1,0]).T
nz = R@np.array([0,0,1]).T

plane1 = R@np.array([0, 0, 0.145])
plane2 = R@np.array([0, -0.06, 0.085])
plane3 = R@np.array([0, 0.06, 0.085])
plane4 = R@np.array([-0.06, 0, 0.085])
plane5 = R@np.array([0.06, 0, 0.085])


d1 = -(n1[0]*plane1[0]+n1[1]*plane1[1]+n1[2]*plane1[2])
d2 = -(n2[0]*plane2[0]+n2[1]*plane2[1]+n2[2]*plane2[2])
d3 = -(n3[0]*plane3[0]+n3[1]*plane3[1]+n3[2]*plane3[2])
d4 = -(n4[0]*plane4[0]+n4[1]*plane4[1]+n4[2]*plane4[2])
d5 = -(n5[0]*plane5[0]+n5[1]*plane5[1]+n5[2]*plane5[2])


boxId = p.loadURDF("box2.urdf",[0.0, 0.0, 0.0],quat,useFixedBase=True)
box2Id = p.loadURDF("object.urdf",[0.0, 0.0, 0.15],quat)
planeID = p.loadURDF("plane.urdf")
p.enableJointForceTorqueSensor(boxId,0,True)


p.stepSimulation()
#jointState = np.array(p.getJointState(boxId,0)[2]).T
R_ = np.array([[0, 0, 1],[0, 1, 0],[1, 0, 0]])
r = [0,0,0]
init_quaternion = np.array([0.0, 0.0, 0.0, 1])
delta_quat = np.array([0.0, 0.0, 0.0, 1])
count = 0


def moving_average_filter(quaternions):
    window_size = 10
    input_qx = []
    input_qy = []
    input_qz = []
    input_qw = []

    input_qx.append(quaternions[0])
    input_qy.append(quaternions[1])
    input_qz.append(quaternions[2])
    input_qw.append(quaternions[3])

    if len(input_fx) >= window_size:
        sum_qx = sum(input_qx[-window_size:])
        sum_qy = sum(input_qy[-window_size:])
        sum_qz = sum(input_qz[-window_size:])
        sum_qw = sum(input_qw[-window_size:])

        filtered_value_qx = sum_qx / window_size
        filtered_value_qy = sum_qy / window_size
        filtered_value_qz = sum_qz / window_size
        filtered_value_qw = sum_qw / window_size

        input_qx.pop(0)
        input_qy.pop(0)
        input_qz.pop(0)
        input_qw.pop(0)

        return (filtered_value_qx, filtered_value_qy, filtered_value_qz, filtered_value_qw)

    return (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
def LPF_filter(fx, fy, fz, mx, my, mz):
    Ts = 1/DT
    x_k = np.array([fx, fy, fz, mx, my, mz]) # Measurement vector

    alpha = 0.650
    pre_filter_f__ = np.zeros(6)
    filter_f__ = np.zeros(6)
    for n in range(6):
        filter_f__[n] = alpha * pre_filter_f__[n] + (1-alpha) * x_k[n]
        pre_filter_f__[n] = filter_f__[n]

    return tuple(filter_f__)
def touch_point(x, size):
    t_rx, t_ry = None, None
    if int(x[1]*100) < 0:
        t_rx = int(x[1] * 100) + 6
    elif int(abs(x[1]*100)) == 0:
        t_rx = 6
    elif int(abs(x[1]*100)) > 0:
        t_rx = int(x[1] * 100) + 6

    if int(x[0]*100) < 0:
        t_ry = abs(int(x[0] * 100)) + 6
    elif int(abs(x[0]*100)) == 0:
        t_ry = 6
    elif int(abs(x[0]*100)) > 0:
        t_ry = 6 - abs(int(x[0] * 100))

    for i in range(11):
        for j in range(11):
            if abs(t_rx) == (i+1) and abs(t_ry) == (j+1):
                print("  ", end='')
            else:
                print("██", end='')
        print()

    print()
    print()
def cross_prod(a, b):
    result = [a[1]*b[2] - a[2]*b[1],
            a[2]*b[0] - a[0]*b[2],
            a[0]*b[1] - a[1]*b[0]]

    return result

def moving_average_filter_wrench(fx, fy, fz, mx, my, mz):
    window_size = 100
    input_fx = []
    input_fy = []
    input_fz = []
    input_mx = []
    input_my = []
    input_mz = []

    input_fx.append(fx)
    input_fy.append(fy)
    input_fz.append(fz)
    input_mx.append(mx)
    input_my.append(my)
    input_mz.append(mz)

    if len(input_fx) >= window_size:
        sum_fx = sum(input_fx[-window_size:])
        sum_fy = sum(input_fy[-window_size:])
        sum_fz = sum(input_fz[-window_size:])
        sum_mx = sum(input_mx[-window_size:])
        sum_my = sum(input_my[-window_size:])
        sum_mz = sum(input_mz[-window_size:])

        filtered_value_fx = sum_fx / window_size
        filtered_value_fy = sum_fy / window_size
        filtered_value_fz = sum_fz / window_size
        filtered_value_mx = sum_mx / window_size
        filtered_value_my = sum_my / window_size
        filtered_value_mz = sum_mz / window_size

        input_fx.pop(0)
        input_fy.pop(0)
        input_fz.pop(0)
        input_mx.pop(0)
        input_my.pop(0)
        input_mz.pop(0)

        return (filtered_value_fx, filtered_value_fy, filtered_value_fz,
                filtered_value_mx, filtered_value_my, filtered_value_mz)

    return (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)

# debug
print("loop star")
count_Test_1 = 0
filtered_value_fx = 0.0
filtered_value_fy = 0.0 
filtered_value_fz = 0.0
filtered_value_mx = 0.0
filtered_value_my = 0.0
filtered_value_mz = 0.0
input_fx = []
input_fy = []
input_fz = []
input_mx = []
input_my = []
input_mz = []
Wrench_init = np.array([0.0, 0.0, 0.0, 0.0, 0.0, -5.3])
p_b = np.array([0,0, 0.065])
while True:
    g_time = time.time()
    # read once
    tx_message = can.Message(arbitration_id = 0x64, is_extended_id = False, data = [0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01])
    bus.send(tx_message, timeout = 0.5)

    rx_message_1 = bus.recv()
    rx_message_2 = bus.recv()

    fx = ((rx_message_1.data[1]<<8) + rx_message_1.data[2])
    fy = ((rx_message_1.data[3]<<8) + rx_message_1.data[4])
    fz = ((rx_message_1.data[5]<<8) + rx_message_1.data[6])
    signed_fx = (-(fx & 0x8000) | (fx&0x7fff))/DF
    signed_fy = (-(fy & 0x8000) | (fy&0x7fff))/DF
    signed_fz = (-(fz & 0x8000) | (fz&0x7fff))/DF
    
    tx = ((rx_message_1.data[7]<<8) + rx_message_2.data[0])
    ty = ((rx_message_2.data[1]<<8) + rx_message_2.data[2])
    tz = ((rx_message_2.data[3]<<8) + rx_message_2.data[4])
    signed_tx = (-(tx & 0x8000) | (tx&0x7fff))/DT
    signed_ty = (-(ty & 0x8000) | (ty&0x7fff))/DT
    signed_tz = (-(tz & 0x8000) | (tz&0x7fff))/DT
    
    
    F_ext_tmp = np.array([signed_tx, signed_ty, signed_tz] + [signed_fx, signed_fy, signed_fz])
    F_ext = alpha*(F_ext_tmp)+(1-alpha)*F_ext_buf
    F_ext_buf = F_ext
    ###########get wrench ###########################
    


    ##########init calculate wrench bias ############
    if (count_Test_1 < 101) :
        window_size = 100
        input_fx.append(F_ext[3])
        input_fy.append(F_ext[4])
        input_fz.append(F_ext[5])
        input_mx.append(F_ext[0])
        input_my.append(F_ext[1])
        input_mz.append(F_ext[2])

        if len(input_fx) >= window_size:
            sum_fx = sum(input_fx[-window_size:])
            sum_fy = sum(input_fy[-window_size:])
            sum_fz = sum(input_fz[-window_size:])
            sum_mx = sum(input_mx[-window_size:])
            sum_my = sum(input_my[-window_size:])
            sum_mz = sum(input_mz[-window_size:])

            filtered_value_fx = sum_fx / window_size
            filtered_value_fy = sum_fy / window_size
            filtered_value_fz = sum_fz / window_size
            filtered_value_mx = sum_mx / window_size
            filtered_value_my = sum_my / window_size
            filtered_value_mz = sum_mz / window_size
        elif  len(input_fx) < window_size:
            filtered_value_fx = F_ext[3]
            filtered_value_fy = F_ext[4]
            filtered_value_fz = F_ext[5]
            filtered_value_mx = F_ext[0]
            filtered_value_my = F_ext[1]
            filtered_value_mz = F_ext[2]

    filter_Wrench_base = np.array([filtered_value_mx, filtered_value_my, filtered_value_mz, filtered_value_fx, filtered_value_fy, filtered_value_fz + 5.3])
    filter_Wrench = F_ext -  filter_Wrench_base
    
    #print("F_ext", F_ext)
    #print("filter_Wrench", filter_Wrench)
    
    count_Test_1 = count_Test_1 + 1
    #############IMU Sensor reading ###################
    if ser.readable():  
        res = ser.readline()  
    try:
        data = res.decode().strip().split(',')
        euler = np.array([float(x) for x in data[1:4]])
        if count == 0: 
            euler_init = np.array([euler[0],euler[1],euler[2]])
            quat_init = p.getQuaternionFromEuler([-euler[0],euler[1],euler[2]])
            R1 = p.getMatrixFromQuaternion(quat_init)
            R1 = np.reshape(R,[3,3])
            count = 1
        #delta_quaternion = p.getDifferenceQuaternion(quaternion, init_quaternion)
        #delta_quaternion = np.array([-delta_quaternion[2], delta_quaternion[1], delta_quaternion[0], 1])
        #quat_test = p.getQuaternionFromMatrix(R_Test)
    except ValueError:
        print('Invalid sensor value:')
 
    #filtered_quaternions = moving_average_filter(delta_quaternion)

    #print(filtered_quaternions[1])
    ########################quaternoin rotation ##########################
    
    euler_dff = euler - euler_init
    euler_dff_x = euler_dff[0] * pi / 180.0
    euler_dff_y = euler_dff[1] * pi / 180.0
    euler_dff_z = euler_dff[2] * pi / 180.0
    quaternion = p.getQuaternionFromEuler([euler_dff_x,-euler_dff_y,-euler_dff_z])
    print(euler_dff)
    R = p.getMatrixFromQuaternion(quaternion)    
    R = np.reshape(R,[3,3])
    R_Test = R1.T @ R
    p.resetBasePositionAndOrientation(boxId, [0,0,0], quaternion)



    #################calcuate adjoint body wrech init #########################
    adjoint_Wrench = Adjoint(RpToTrans(R, p_b).T) @ Wrench_init.T
    adjoint_force = np.array([adjoint_Wrench[3], adjoint_Wrench[4], adjoint_Wrench[5]])
    adjoint_moment = cross_prod(p_b, adjoint_force)

    result_Wrench_body = np.array([adjoint_moment[0], adjoint_moment[1], adjoint_moment[2], adjoint_force[0], adjoint_force[1], adjoint_force[2]])
    result_Wrench = filter_Wrench - result_Wrench_body

        
    n1 = R@np.array([0,0,1]).T
    n2 = R@np.array([0,-1,0]).T
    n3 = R@np.array([0,1,0]).T
    n4 = R@np.array([-1,0,0]).T
    n5 = R@np.array([1,0,0]).T

    nx = R@np.array([1,0,0]).T
    ny = R@np.array([0,1,0]).T
    nz = R@np.array([0,0,1]).T


    plane1 = R@np.array([0, 0, 0.145])
    plane2 = R@np.array([0, -0.06, 0.085])
    plane3 = R@np.array([0, 0.06, 0.085])
    plane4 = R@np.array([-0.06, 0, 0.085])
    plane5 = R@np.array([0.06, 0, 0.085])

    d1 = -(n1[0]*plane1[0]+n1[1]*plane1[1]+n1[2]*plane1[2])
    d2 = -(n2[0]*plane2[0]+n2[1]*plane2[1]+n2[2]*plane2[2])
    d3 = -(n3[0]*plane3[0]+n3[1]*plane3[1]+n3[2]*plane3[2])
    d4 = -(n4[0]*plane4[0]+n4[1]*plane4[1]+n4[2]*plane4[2])
    d5 = -(n5[0]*plane5[0]+n5[1]*plane5[1]+n5[2]*plane5[2])
 
    ################calculate A matrix ########################
    f = np.array([result_Wrench[3],result_Wrench[4],result_Wrench[5]])
    norm_f= np.linalg.norm(f)
    u = f/norm_f


    U1 = np.array([[0 ,-u[2] ,u[1]],[u[2] ,0 ,-u[0]],[-u[1], u[0], 0],[n1[0], n1[1], n1[2]]])
    U2 = np.array([[0 ,-u[2] ,u[1]],[u[2] ,0 ,-u[0]],[-u[1], u[0], 0],[n2[0], n2[1], n2[2]]])
    U3 = np.array([[0 ,-u[2] ,u[1]],[u[2] ,0 ,-u[0]],[-u[1], u[0], 0],[n3[0], n3[1], n3[2]]]) 
    U4 = np.array([[0 ,-u[2] ,u[1]],[u[2] ,0 ,-u[0]],[-u[1], u[0], 0],[n4[0], n4[1], n4[2]]]) 
    U5 = np.array([[0 ,-u[2] ,u[1]],[u[2] ,0 ,-u[0]],[-u[1], u[0], 0],[n5[0], n5[1], n5[2]]])


    ################calculate r (distance) ########################
    try:
        r1 = np.linalg.inv(U1.T @ U1)@U1.T @ np.array([-result_Wrench[0]/norm_f,-result_Wrench[1]/norm_f,-result_Wrench[2]/norm_f,-d1 ])
        #if r1[0] > 0.06 or r1[0] < -0.06 or r1[1] > 0.5 or r1[1] < -0.06 or r1[2] > 0.145  or r1[2] < 0.145 : r1[0] = [0,0,0] 
        
    except:
        r1 = [0,0,0]

    try:
        r2 = np.linalg.inv(U2.T @ U2)@U2.T @np.array([-result_Wrench[0]/norm_f,-result_Wrench[1]/norm_f,-result_Wrench[2]/norm_f,-d2 ])
        #if r2[0] > 0.06 or r2[0] < -0.06 or r2[1] > -0.06 or r2[1] < -0.06 or r2[2] > 0.145 or r2[2] < 0.025  : r2 = [0,0,0]
    except:
        r2 = [0,0,0]
        
    try:
        r3 = np.linalg.inv(U3.T @ U3)@U3.T @np.array([-result_Wrench[0]/norm_f,-result_Wrench[1]/norm_f,-result_Wrench[2]/norm_f,-d3 ])
        #if r3[0] > 0.06 or r3[0] < -0.06 or r3[1] > 0.06 or r3[1] < 0.06  or r3[2] > 0.145 or r3[2] < 0.025: r3 = [0,0,0]
    except:
        r3 = [0,0,0]	

    try:
        r4 = np.linalg.inv(U4.T @ U4)@U4.T @np.array([-result_Wrench[0]/norm_f,-result_Wrench[1]/norm_f,-result_Wrench[2]/norm_f,-d4 ])
        #if r4[0] > -0.06 or r4[0] < -0.06 or r4[1] > 0.06 or r4[1] < -0.06 or r4[2] > 0.145 or r4[2] < 0.025 : r4 = [0,0,0]
    except:
        r4 = [0,0,0]

    try:
        r5 = np.linalg.inv(U5.T @ U5)@U5.T @np.array([-result_Wrench[0]/norm_f,-result_Wrench[1]/norm_f,-result_Wrench[2]/norm_f,-d5 ])
        #if r5[0] > 0.06 or r5[0] < 0.06 or r5[1] > 0.06 or r5[1] < -0.06 or r5[2] > 0.145 or r5[2] < 0.025 : r5 = [0,0,0]
    except:
        r5 = [0,0,0]

    ########## determine r from force vector ###########
    r_Test = np.array([r1, r2, r3, r4, r5])
    nonzero_rows = ~np.all(r_Test == 0, axis=1)
    if nonzero_rows[0] == True : r = r_Test[0]
    if nonzero_rows[1] == True or nonzero_rows[2] == True : 
        if filter_Wrench[4] > 0 : r = r_Test[2]
        elif filter_Wrench[4] < 0 : r = r_Test[1]
    if nonzero_rows[3] == True or nonzero_rows[4] == True : 
        if filter_Wrench[3] > 0 : r = r_Test[4]
        elif filter_Wrench[3] < 0 : r = r_Test[3]

    #if norm_f < 1:
    #    r = np.array([nan,nan,nan])
    
    
    #if count_Test_1 % 10 == 0:
    #    print(r)
    
    # uf_nx = f_nx/np.linalg.norm(f_nx)
    # uf_ny = f_ny/np.linalg.norm(f_ny)
    # uf_nz = f_nz/np.linalg.norm(f_nz)

    '''
    p.addUserDebugLine([r[0]+1*uf_nx[0],r[1]+1*uf_nx[1],r[2]+1*uf_nx[2]],[r[0]-1*uf_nx[0],r[1]-1*uf_nx[1],r[2]-1*uf_nx[2]],[1,0,0],0.1,dt*10,replaceItemUniqueId=x_lineId)
    p.addUserDebugLine([r[0]+1*uf_ny[0],r[1]+1*uf_ny[1],r[2]+1*uf_ny[2]],[r[0]-1*uf_ny[0],r[1]-1*uf_ny[1],r[2]-1*uf_ny[2]],[0,1,0],0.1,dt*10,replaceItemUniqueId=y_lineId)
    p.addUserDebugLine([r[0]+1*uf_nz[0],r[1]+1*uf_nz[1],r[2]+1*uf_nz[2]],[r[0]-1*uf_nz[0],r[1]-1*uf_nz[1],r[2]-1*uf_nz[2]],[0,0,1],0.1,dt*10,replaceItemUniqueId=z_lineId)	

    p.addUserDebugLine([r[0],r[1],r[2]],[r[0]-f_nx[0],r[1]-f_nx[1],r[2]-f_nx[2]],[1,0,0],0.5,dt*50,replaceItemUniqueId=pos_x_lineId)
    p.addUserDebugLine([r[0],r[1],r[2]],[r[0]-f_ny[0],r[1]-f_ny[1],r[2]-f_ny[2]],[0,1,0],0.5,dt*50,replaceItemUniqueId=pos_y_lineId)
    p.addUserDebugLine([r[0],r[1],r[2]],[r[0]-f_nz[0],r[1]-f_nz[1],r[2]-f_nz[2]],[0,0,1],0.5,dt*50,replaceItemUniqueId=pos_z_lineId)
    '''

    p.stepSimulation(); 


    #print(_F)
    # while time.time()-g_time<(1/RFT_frq):
    #     time.sleep(1/100000000)
    #     glob_time_buf=time.time()
    #     init_time_buf=init_time
    # print(time.time()-g_time)
